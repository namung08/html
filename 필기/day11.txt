1. chain
 - jQuery의 메소드들은 반환값으로 자기 자신을 반환해야
 한다는 규칙을 가지고 있다. 
 - 이를 이용하면 한번 선택한 대상에 대해서 연속적인 제어를
 할 수 있다.
 
2. event
 $("#btn").click(function(event){
	// 코드
 });
 $("#btn").bind("click",function(event){
 	// 코드
 });
 $("#btn).on("click",function(event){
	// 코드
 });
 $("body").on({"click":function(event){
	// 코드
 }, "#btn"});
 $("body").on("click","#btn",function(event){
	// 코드작성
 });

 - one() : 이벤트 핸들러가 한번만 실행되고 나서는,
 더는 실행되지 않는다. 

3. effect 효과

4. html 속성제어
 4-1. this
  - this란 자기 자신을 가리키는 특수 키워드이다.

	$(셀렉터).이벤트함수(function(){
		$(this).html(....);
 	});

 4-2. 요소의 순서 판별하기
 - 특정 객체에 대하여 index()함수의 리턴값을 사용하면 
 자신이 속한 부모 태그 안에서 태그 종류의 구분 없이 
 자신이 몇 번째 요소인지를 알 수 있다. 
 - index()함수는 요소를 0부터 카운트 한다. 

	<div>
		<button></button>
		<button></button>
		<strong></strong>
	</div>
 4-3. 속성값 읽기
 - HTML태그 요소의 특정 속성값을 얻기 위해서는 attr()함수를 사용
	let 변수 = $("요소").attr("속성이름");

 4-4. 속성값 변경/추가 하기
 - HTML태그 요소의 특정 속성값을 지정할 경우에도 attr()함수를 사용
	$("요소").attr("속성이름","값");

 - attr()함수는 object 형태의 값을 지정하여서 다중처리가 가능하다
	$("요소").attr({
		속성1 : "값",
		속성2 : "값",
		속성3 : "값"
	});

 4-5. 페이지가 로드 된 이후 실행
 - 잘못된 표현(사용금지)
	$(document).bind('load',function(){});
 - 가능한 표현
	$(document).ready(function(){ ... });
	$(function(){ ... });